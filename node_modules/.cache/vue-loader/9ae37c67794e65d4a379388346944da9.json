{"remainingRequest":"C:\\Users\\japga\\Documents\\ProyectoWeb\\2CoreUI-Vue\\CoreUI-Vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\japga\\Documents\\ProyectoWeb\\2CoreUI-Vue\\CoreUI-Vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\japga\\Documents\\ProyectoWeb\\2CoreUI-Vue\\CoreUI-Vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\japga\\Documents\\ProyectoWeb\\2CoreUI-Vue\\CoreUI-Vue\\src\\views\\base\\DataTable.vue?vue&type=template&id=467f3c00&","dependencies":[{"path":"C:\\Users\\japga\\Documents\\ProyectoWeb\\2CoreUI-Vue\\CoreUI-Vue\\src\\views\\base\\DataTable.vue","mtime":1635112153662},{"path":"C:\\Users\\japga\\Documents\\ProyectoWeb\\2CoreUI-Vue\\CoreUI-Vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\japga\\Documents\\ProyectoWeb\\2CoreUI-Vue\\CoreUI-Vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\japga\\Documents\\ProyectoWeb\\2CoreUI-Vue\\CoreUI-Vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\japga\\Documents\\ProyectoWeb\\2CoreUI-Vue\\CoreUI-Vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}